<?php
// $Id: ljsync.module,v 1.6 2010/08/26 13:54:44 noelbush Exp $

/**
 * @file
 * The main functions for the ljsync module.
 */

require_once(drupal_get_path('module', 'ljsync') .'/ljsync.inc');

define ('LJSYNC_DEFAULT_USERAGENT', 'http://'. $_SERVER['SERVER_NAME'] .'; '. $_SERVER['SERVER_ADMIN']);
define ('LJSYNC_DEFAULT_TAGS_VID', 1);

function ljsync_perm() {
  return array('can sync from livejournal');
}

function ljsync_menu() {
  $items['admin/settings/ljsync'] = array(
    'title' => 'LiveJournal Sync',
    'description' => 'Allows you or your users to synchronize entries from a LiveJournal account.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ljsync_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function ljsync_user($type, &$edit, &$account, $category = NULL) {
  switch ($type) {
    case 'form':
      if ($category == 'account' && user_access('can sync from livejournal', $account)) {
        $settings = ljsync_load_settings($account->uid);
        $form['ljsync']['active'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use LiveJournal sync'),
          '#description' => t('Check this box to enable syncing from LiveJournal.'),
          '#default_value' => $settings->active,
        );
        $form['ljsync'] = array(
          '#type' => 'fieldset',
          '#tree' => 'true',
          '#title' => t('LiveJournal sync'),
          '#weight' => 1,
        );
        $form['ljsync']['active'] = array(
          '#type' => 'checkbox',
          '#title' => t('Use LiveJournal sync'),
          '#description' => t('Check this box to enable syncing from LiveJournal.'),
          '#default_value' => $settings->active,
        );
        $form['ljsync']['lj_uname'] = array(
          '#type' => 'textfield',
          '#title' => t('Livejournal username'),
          '#default_value' => $settings->lj_uname,
          '#size' => 40
        );
        $form['ljsync']['lj_pass'] = array(
          '#type' => 'password',
          '#title' => t('Password'),
          '#size' => 15,
          '#description' => t('Only enter a value if you wish to change the stored password. Leaving this field blank will not erase any passwords already stored.'),
        );
        $form['ljsync']['tags'] = array(
          '#type' => 'checkbox',
          '#title' => t('Copy tags'),
          '#default_value' => $settings->tags,
          '#description' => t('Check this box to copy tags from LiveJournal posts.'),
        );
        $form['ljsync']['clear'] = array('#value' => '<br clear="left" />');
        return $form;
      }
      break;
      case 'update':
      case 'insert':
        if (user_access('can sync from livejournal', $account) && $edit['ljsync']) {
          $settings = (object) $edit['ljsync'];
          $settings->uid = $account->uid;
          ljsync_save_settings($settings);
        }
        break;
      case 'view':
        global $user;
        if (user_access('can sync from livejournal', $account) && ($user->uid == $account->uid || user_access('administer site configuration'))) {
          $settings = ljsync_load_settings($account->uid);
          if (!$settings->active) {
            $output = t('Not active');
          }
          else {
            $output = theme('ljsync_user_info', $settings, $account);
          }
          $account->content['summary']['ljsync'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Livejournal Sync'),
            '#value' => $output,
            '#attribues' => array('class' => 'ljsync'),
          );
      }
  }
}

function ljsync_admin_settings_form() {
  $vocab_objects = taxonomy_get_vocabularies();
  foreach ($vocab_objects as $vid => $vocab_object) {
    $vocabularies[$vid] = $vocab_object->name;
  }
  $form['ljsync_max_create'] = array('#type' => 'select',
                                     '#default_value' => variable_get('ljsync_max_create', 50),
                                     '#options' => array(0 => '', 5 => 5, 50 => 50, 500 => 500, 2000 => 2000, 5000 => 5000),
                                     '#title' => t('Maximum number of entries to create per user'),
                                     '#description' => t('Leave blank for no limit.'),
  );
  $form['ljsync_useragent'] = array('#type' => 'textfield',
                                    '#title' => 'User agent',
                                    '#description' => t('The user agent string to send to LiveJournal when retrieving some data.  (Leave as-is unless directed to do otherwise.)'),
                                    '#size' => 30,
                                    '#default_value' => variable_get('ljsync_useragent', LJSYNC_DEFAULT_USERAGENT),
                                    '#maxlength' => 128,
                                    '#required' => TRUE);
  if (isset($vocabularies)) {
    $form['ljsync_tags_vid'] = array('#type' => 'select',
                                     '#options' => $vocabularies,
                                     '#default_value' => variable_get('ljsync_tags_vid', LJSYNC_DEFAULT_TAGS_VID),
                                     '#title' => t('Tag vocabulary'),
                                     '#description' => t('Taxonomy vocabulary for tags from LJ posts.'));
  }
  $node_type_objects = node_get_types('types');
  foreach ($node_type_objects as $type => $object) {
    $node_types[$type] = $object->name;
  }
  $form['ljsync_node_type'] = array('#type' => 'select',
                                    '#options' => $node_types,
                                    '#default_value' => variable_get('ljsync_node_type', 'blog'),
                                    '#required' => TRUE,
                                    '#title' => t('Entry node type'),
                                    '#description' => l(t('Node type'), 'admin/content/types/list') .t(' to use for nodes synced from LiveJournal.'));
  $format_objects = filter_formats();
  foreach ($format_objects as $format) {
    $formats[$format->format] = $format->name;
  }
  $form['ljsync_node_format'] = array('#type' => 'select',
                                         '#options' => $formats,
                                         '#default_value' => variable_get('ljsync_node_format', 1),
                                         '#required' => TRUE,
                                         '#title' => t('Node input format'),
                                         '#description' => l(t('Input format'), 'admin/settings/filters/list') .t(' to use for <i>nodes</i> synced from LiveJournal.'));
  $form['ljsync_comment_format'] = array('#type' => 'select',
                                         '#options' => $formats,
                                         '#default_value' => variable_get('ljsync_comment_format', 1),
                                         '#required' => TRUE,
                                         '#title' => t('Comment input format'),
                                         '#description' => l(t('Input format'), 'admin/settings/filters/list') .t(' to use for <i>comments</i> synced from LiveJournal.'));
  return system_settings_form($form);
}

function ljsync_admin_settings_form_submit($form, &$form_state) {
  system_settings_form_submit($form, $form_state);
}

function ljsync_cron() {
  watchdog('ljsync', "Starting cron task.", NULL, WATCHDOG_DEBUG);
  $query = db_query('SELECT * FROM {ljsync}');
  while ($settings = db_fetch_object($query)) {
    if ($settings->active == 1) {
      $uid = $settings->uid;
      watchdog('ljsync', "Syncing LJ for uid %uid.", array('%uid' => $uid), WATCHDOG_DEBUG);
      $cache_dir = realpath(file_directory_path(). '/ljsync');
      $dumpfile = "$settings->lj_uname-lj.xml";
      $stderr_file = file_directory_temp() .'/jbackup-err';
      $cmd = realpath(drupal_get_path('module', 'ljsync')) .'/jbackup.pl --sync'.
                ' --user='. $settings->lj_uname .
                ' --md5pass='. $settings->lj_pass .
                ' --cache-dir='. $cache_dir .
                ' --dump=xml'.
                ' --file='. "$cache_dir/$dumpfile".
                ' 2> '. $stderr_file;
      watchdog('ljsync', "jbackup command line: %cmd", array('%cmd' => $cmd), WATCHDOG_DEBUG);
      $output = shell_exec($cmd);
      watchdog('ljsync', "jbackup stdout: %output", array('%output' => $output), WATCHDOG_DEBUG);
      foreach (file($stderr_file) as $line) {
        watchdog('ljsync', "jbackup stderr: %line", array('%line' => $line), WATCHDOG_DEBUG);
      }
      $max_create = variable_get('ljsync_max_create', 0);
      watchdog('ljsync', "%max entries for uid %uid from %file",
        array('%max' => ($max_create != 0 ? t('Up to '). $max_create .' ' : t('All ')),
              '%uid' => $uid,
              '%file' => $dumpfile),
        WATCHDOG_DEBUG);
      ljsync_perform_import("$cache_dir/$dumpfile", $uid, $settings->lj_uname,
                           TRUE,
                           $max_create);
      watchdog('ljsync', "Finished for uid %uid.", array('%uid' => $uid), WATCHDOG_DEBUG);
    }
  }
  watchdog('ljsync', "Finished cron task.", NULL, WATCHDOG_DEBUG);
}

function ljsync_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'load':
      $node->lj_url = _ljsync_node_lj_url($node);
      $node->lj_remote = _ljsync_node_lj_remote($node);
      break;
          
    case 'delete':
      $nid = $node->nid;
      db_query("DELETE FROM {ljsync_node} WHERE nid = %d", $nid);
      $query = db_query("SELECT cid FROM {comments} WHERE nid = %d", $nid);
      while ($result = db_fetch_array($query)) {
        db_query("DELETE FROM {ljsync_comments} WHERE cid = %d", $result['cid']);
      }
      break;
      
  }
}

/**
 * If possible, returns the URL of the original LJ post that this
 * node was created from.
 */
function _ljsync_node_lj_url($node) {
  // See if this node's user is an ljsync user.
  $query = db_query("SELECT lj_uname FROM {ljsync} WHERE uid = %d AND active = 1", $node->uid);
  if ($query) {
    $result = db_fetch_array($query);
    if (!empty($result)) {
      $lj_uname = $result['lj_uname'];
      
      // Now retrieve the ditemid for this node.
      $nid = $node->nid;
      $query = db_query("SELECT ditemid FROM {ljsync_node} WHERE nid = %d", $nid);
      if ($query) {
        $result = db_fetch_array($query);
        if (!empty($result)) {
          $ditemid = $result['ditemid'];
          if ($ditemid) {
            // Now we can construct the original LJ url.
            return "http://$lj_uname.livejournal.com/$ditemid.html";
          }
        }
      }
    }
  }
}

/** Returns whether the given node originated remotely (from LiveJournal). */
function _ljsync_node_lj_remote($node) {
  $nid = $node->nid;
  $query = db_query("SELECT origin FROM {ljsync_node} WHERE nid = %d", $nid);
  if ($query) {
    $result = db_fetch_array($query);
    if (!empty($result)) {
      $origin = $result['origin'];
      return $origin == LJSYNC_ORIGIN_REMOTE;
    }
  }
  watchdog('ljsync', "Could not find origin in ljsync_node for nid %nid.  Have you run update.php?", array('%nid' => $nid), WATCHDOG_CRITICAL);
}

function ljsync_comment_delete($comment) {
  db_query("DELETE FROM {ljsync_comments} WHERE cid = %d", $comment->cid);
}

function ljsync_theme($existing, $type, $theme, $path) {
  $hooks['ljsync_user_info'] = array(
    'arguments' => array('settings' => NULL, 'account' => NULL),
    'file' => 'ljsync.module',
  );
  $hooks['ljuser'] = array(
    'arguments' => array('name' => NULL),
    'file' => 'ljsync.module',
  );
  $hooks['ljcomm'] = array(
    'arguments' => array('name' => NULL),
    'file' => 'ljsync.module',
  );
  return $hooks;
}

function theme_ljsync_user_info($settings, $account) {
  $output = '<div id="ljsync-user-info">';
  if ($settings && $account) {
    $output .=  '<div>Livejournal username: '. $settings->lj_uname .'</div>'.
      '<div>Dumpfile: '. $settings->dumpfile .'</div>';
  }
  $output .= '</div>';
  return $output;
}


/**
 * Add some variables for use in the node template.
 */
function ljsync_preprocess_node(&$vars) {
  $node = node_load($vars['nid']);
  if ($node->type == variable_get('ljsync_node_type', 'blog')) {
    $module_path = drupal_get_path('module', 'ljsync');
    // Insert our node template.
    $vars['template_files'][] = "node-lj_entry";
    // Provide some other useful variables.
    if (count($node->taxonomy) > 0) {
      $vars['tags'] = theme('links', taxonomy_link('taxonomy terms', $node), array('class' => 'links inline'));
    }
    $vars['title_link'] = l($node->title, $node->path);
    $vars['formatted_date'] = format_date($node->created, 'custom', "Y-m-d H:i T");
    if (isset($node->lj_url)) {
      $vars['lj_link'] = l($node->lj_url, $node->lj_url);
      $vars['lj_remote'] = $node->lj_remote;
    }
  }
  drupal_add_css(drupal_get_path('module', 'ljsync') .'/theme/ljsync.css', 'module');
}

/**
* Implementation of hook_theme_registry_alter().
*/
function ljsync_theme_registry_alter(&$registry) {
  
  // Insert our implementation of theme_user_picture().
  if (!empty($registry['user_picture'])) {
    $registry['user_picture']['function'] = 'ljsync_user_picture';
  }
  
  // This section and the ljsync_preprocess_comment_fix function below come from http://drupal.org/node/411164#comment-1970642
  // This is so we can display comment controls like LJ does
  // Work around issue with comment.module clobbering its links array.
  $functions =& $registry['comment']['preprocess functions'];
  $index = array_flip($functions);
  array_splice($functions, $index['template_preprocess_comment'], 0, array('ljsync_preprocess_comment_fix'));
  
  // Insert our preprocess_node function.
  array_splice($functions, $index['template_preprocess_node'], 0, array('ljsync_preprocess_node'));
  
  // This section is borrowed from advanced_profile module
  // --- The following section manipulates the theme registry so the .tpl files
  // --- for the given templates can be found first in the (sub)theme directory
  // --- then in ancestor themes, then in the ljsync theme directory.

  // Affected templates
  $templates = array('comment', 'node');

  // Find all our ancestor themes and put them in an array.
  global $theme;
  $themes = list_themes();

  $ancestor_paths = array();
  $ancestor = $theme;
  while ($ancestor && isset($themes[$ancestor]->base_theme)) {
    array_unshift($ancestor_paths, dirname($themes[$themes[$ancestor]->base_theme]->filename));
    $ancestor = $themes[$ancestor]->base_theme;
  }

  $template_path = drupal_get_path('module', 'ljsync') . '/theme';
  foreach ($templates as $template) {
    // Sanity check in case the template is not being used.
    if (is_array($registry[$template])) {
      // If there was a path in there, store it.
      $existing_path = array_shift($registry[$template]['theme paths']);

      // Slide the paths we are adding in before the existing one.
      array_unshift($registry[$template]['theme paths'], $existing_path, $template_path);

      // If there are any ancestor paths (ie: we are in a subtheme, add those)
      foreach ($ancestor_paths as $ancestor_path) {
        $registry[$template]['theme paths'][] = $ancestor_path;
      }

      // Put the active theme's path last since that takes precidence.
      $registry[$template]['theme paths'][] = path_to_theme();
    }
  }
}

/**
* Process variables for comment.tpl.php.
* Process $links before template_preprocess_comment() clobbers it.
* @see template_preprocess_comment()
*/
function ljsync_preprocess_comment_fix(&$variables) {
  $variables['comment']->links = $variables['links'];
}

/**
 * Add some variables for use in the comment template.
 */
function ljsync_preprocess_comment(&$vars) {
  $comment = $vars['comment'];
  $node = node_load($comment->nid);
  if ($node->type == variable_get('ljsync_node_type', 'blog')) {
    $module_path = drupal_get_path('module', 'ljsync');
    // Insert our comment template.
    $vars['template_files'][] = "comment-lj_entry";
    $vars['author_comment'] = $comment->uid == $node->uid ? TRUE : FALSE;
    $poster = user_load(array('uid' => $comment->uid));
    $vars['poster'] = $poster;
    $vars['subject'] = $comment->subject;
    $vars['is_lj_user'] = ljsync_is_lj_user($poster);
    $vars['lj_profile_url'] = "http://$poster->name.livejournal.com/profile";
    $vars['lj_user_page_url'] = "http://$poster->name.livejournal.com";
    $vars['lj_userinfo_icon'] = theme('image', $module_path . '/theme/userinfo.gif', 'LiveJournal userinfo', 'LiveJournal userinfo', NULL, TRUE);
    $vars['date'] = format_date($comment->timestamp, 'custom', "Y-m-d H:i T");
    $vars['link'] = l('link', $_GET['q'], array('fragment' => "comment-$comment->cid"));
    $links = $comment->links;
    if (isset($links['comment_delete'])) {
      $vars['delete_link'] = l(theme('image', $module_path . '/theme/btn_del.gif', 'Delete comment', 'Delete comment', NULL, TRUE),
                               "comment/delete/$comment->cid",
                               array('html' => TRUE));
    }
    $links['comment_reply']['title'] = t('Reply to this');
    unset($links['comment_delete']);
    unset($links['comment_edit']);
    $vars['links'] = theme('links', $links);
  }
}

/**
 * Implementation of hook_filter.
 * 
 * Formats <lj ,,,/> tags as html.
 */
function ljsync_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return array(0 => t('LiveJournal tag filter'));
      
    case 'description':
      return t("Formats <lj .../> tags as html.");
      
    case 'prepare':
      // Using 0xFE and 0xFF to replace < > as demonstrated at http://api.drupal.org/api/function/hook_filter/6
      $text = preg_replace('@<lj ((user|comm)=.+?)/?>@s', "\xFElj $1/\xFF", $text);
      return $text;
     
    case 'process':
      $text = preg_replace('@\xFElj user="(.+?)"/\xFF@s', theme('ljuser', '$1'), $text);
      $text = preg_replace('@\xFElj comm="(.+?)"/\xFF@s', theme('ljcomm', '$1'), $text);
      return $text;
    
    default:
      return $text;
  }
}

/**
 * Theme a <lj user="xxx"/> tag.  (Final slash is optional.)
 */
function theme_ljuser($name) {
  return '<span class="ljuser ljuser-name_'. $name .'" style="white-space: nowrap;" lj:user="'. $name .'">'.
           '<a href="http://community.livejournal.com/'. $name .'/profile">'.
             '<img width="17" height="17" style="border: 0pt none ; vertical-align: bottom; padding-right: 1px;" alt="[info]" src="'.
               base_path() . drupal_get_path('module', 'ljsync') .'/theme/userinfo.gif" />'.
           '</a>'.
           '<a href="http://'. $name .'.livejournal.com/">'.
             '<b>'. $name .'</b>'.
           '</a>'.
         '</span>';  
}

/**
 * Theme a <lj comm="xxx"/> tag.  (Final slash is optional.)
 */
function theme_ljcomm($name) {
  return '<span class="ljuser ljuser-name_'. $name .'" style="white-space: nowrap;" lj:user="'. $name .'">'.
           '<a href="http://'. $name .'.livejournal.com/profile">'.
             '<img width="16" height="16" style="border: 0pt none ; vertical-align: bottom; padding-right: 1px;" alt="[info]" src="'.
               base_path() . drupal_get_path('module', 'ljsync') .'/theme/community.gif" />'.
           '</a>'.
           '<a href="http://community.livejournal.com/'. $name .'">'.
             '<b>'. $name .'</b>'.
           '</a>'.
         '</span>';  
}

/**
 * Only a minor tweak of the user module's picture theming function,
 * omitting the link to the user profile.
 */
function ljsync_user_picture($account) {
  if (variable_get('user_pictures', 0)) {
    if ($account->picture && file_exists($account->picture)) {
      $picture = $account->picture;
    }
    else if (variable_get('user_picture_default', '')) {
      $picture = variable_get('user_picture_default', '');
    }

    if (isset($picture)) {
      $alt = t("@user's picture", array('@user' => $account->name ? $account->name : variable_get('anonymous', t('Anonymous'))));
      $picture = theme('image', $picture, $alt, $alt, '', FALSE);
      return "<div class=\"picture\">$picture</div>";
    }
  }
}

